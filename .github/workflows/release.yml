name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  npm-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          always-auth: true
      - name: Read package metadata
        id: meta
        run: |
          echo "name=$(node -e \"console.log(require('./package.json').name)\")" >> "$GITHUB_OUTPUT"
          echo "version=$(node -e \"console.log(require('./package.json').version)\")" >> "$GITHUB_OUTPUT"
      - name: Check if version already published
        id: check
        env:
          NAME: ${{ steps.meta.outputs.name }}
          VERSION: ${{ steps.meta.outputs.version }}
        run: |
          set -e
          if npm view "$NAME" version >/dev/null 2>&1; then
            PUBLISHED=$(npm view "$NAME" version)
            if [ "$PUBLISHED" = "$VERSION" ]; then
              echo "skip=true" >> "$GITHUB_OUTPUT"
              echo "Version $VERSION already published; skipping."
            fi
          fi
      - name: Configure npm auth
        if: steps.check.outputs.skip != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
      - name: Install
        if: steps.check.outputs.skip != 'true'
        run: npm ci
      - name: Build
        if: steps.check.outputs.skip != 'true'
        run: npm run build
      - name: Publish
        if: steps.check.outputs.skip != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --provenance --access public
